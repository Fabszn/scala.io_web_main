{"uuid":"c3420f4c03af40f298c71a2ca38acf03d7e1ce6a","bioAsHtml":"<p>Functional programming nut. Continiously trying to use zygohistomorphic prepromorphisms at work with no success so far.</p>\n","acceptedTalks":[{"talkType":"Conference","track":"Type-Level and/or Functionnal Programming","audienceLevel":"intermediate","summaryAsHtml":"<p>Présentation de la monade Free au travers de l&#x27;implémentation d&#x27;une API de stream processing.</p>\n","links":[{"href":"http://cfp.scala.io/api/conferences/scalaIOFR2014/talks/UWL-285","rel":"http://cfp.scala.io/api/profile/talk","title":"More details about this talk"},{"href":"http://cfp.scala.io/api/conferences/scalaIOFR2014/speakers/c3420f4c03af40f298c71a2ca38acf03d7e1ce6a","rel":"http://cfp.scala.io/api/profile/speaker","title":"Yorick Laupa"}],"id":"UWL-285","title":"La monade Free par l'exemple","talkLang":"fr"}],"company":"Valwin","bio":"Functional programming nut. Continiously trying to use zygohistomorphic prepromorphisms at work with no success so far. ","lastName":"Laupa","firstName":"Yorick","blog":"www.corecursion.net","avatarURL":"http://scala.io/2013/assets/images/speakers/yorick-laupa.png","twitter":"@yoeight","lang":"fr"}
